@startuml
left to right direction
title Tableau Extensions API
caption Still missing: Events, Filter SubTypes, ? (see https://tableau.github.io/extensions-api/ )

legend
- blue: the core Tableau objects
- green: accessor for the actual data values 
- purple: objects representing user modifications to a worksheet/dashboard
- orange: objects representing visual appearance of the workbook
end legend


skinparam class {
ArrowColor SeaGreen
BorderColor Black
}
skinparam stereotypeCBackgroundColor DimGrey
skinparam stereotypeCBackgroundColor<< Core >> YellowGreen

class tableau.extensions.dashboardContent {
Dashboard dashboard 
}

class tableau.extensions.workbook {
DataSources[] getAllDataSources()
}
note right
why can't it also getAllSheets?
end note


circle tableau.extensions.initializeAsync() 
note right
must run this first
end note

class tableau.extensions.settings 

class tableau.extensions.environment

class tableau.extensions.ui 

tableau.extensions.dashboardContent -l[hidden]- tableau.extensions.workbook
tableau.extensions.workbook -r[hidden]- tableau.extensions.dashboardContent
tableau.extensions.dashboardContent -r[hidden]- tableau.extensions.ui
tableau.extensions.dashboardContent -r[hidden]- tableau.extensions.settings
tableau.extensions.dashboardContent -r[hidden]- tableau.extensions.environment

tableau.extensions.workbook --- DataSource
tableau.extensions.dashboardContent *--- Dashboard
Dashboard .d.|> Sheet : implements
Worksheet .l.|> Sheet : implements 

Worksheet -r-|> DataSource
Dashboard o---o Worksheet
DashboardObject --o Worksheet
Dashboard ..|> DashboardObject
DashboardObject -|> Dashboard
Dashboard -d[hidden]- DataSource

Sheet o-l- Parameter
Sheet o-- Filter
Filter -r[hidden]- Worksheet

Worksheet o-- Annotation
Worksheet o--- Column

Worksheet o-- MarksCollection 
MarksCollection o-d- MarkInfo
MarkInfo -o DataTable

DataSource o-- LogicalTable
DataSource o-- DataTable
DataSource o-- DataTableReader

Filter ...|> Field : can identify
Filter <|-- Field
Filter ...|> Worksheet : can identify

Column -[hidden]- DataTable

DataSource o-- TableSummary
DataSource o-- ConnectionSummary

Worksheet o-- LogicalTable
Worksheet o-- DataTable
Worksheet o-- DataTableReader
TableSummary ... ConnectionSummary
Column ... Field
Field o-- DataSource
DataTable o-- Column
DataTableReader o-- DataTable

abstract Sheet #azure{
String name
SheetType sheetType
Size size
Parameter findParameter()
Parameter[] getParameters()
Filter[] getFilters()
applyFilter(Filter)
clearFilterAsync()
}

class Dashboard #cadetblue {
activeDashboardObjectId
activeDashboardName
Object[] objects
Worksheet[] worksheets
DashboardObject getDashboardObjectById()
setDashboardObjectVisibility(DashboardObject)
replayAnimation()
moveAndResizeDashboardObjects()
-- deprecated --
-setZoneVisibility()
}

class DataSource #cadetblue{
name, id, 
Fields[] fields
String extractUpdateTime
isExtract
isPublished
String publishedUrl,
refresh()
(->ConnectionSummary[]) getConnectionSummaries()
(->DataTable) getUnderlyingData()
(->LogicalTable[]) getLogicalTables()
(->DataTable) getLogicalTableData(id, options)
(->DataTableReader) getLogicalTableDataReader(id, options)
--deprecated--
-(->TableSummary[]) getActiveTables()
}
note right of DataSource 
if TableSummary is deprecated, where can we get the initial SQL?
end note

class Worksheet #cadetblue  {
Dashboard parentDashboard
DataSource[] getDatasourcesAsync()
MarksCollection  getHighlightedMarks()
MarksCollection getSelectedMarks()
MarksCollection  selectMarksBy[ID|Value]()
clearSelectedMarks()
Annotation[] annotateMarks(MarkInfo[])
Annotation[] getAnnotations()
removeAnnotation(Annotation)
hoverTuple/selectTuple(Tuple)
Column[] getSummaryColumnsInfo()
(->DataTableReader) getSummaryDataReader()
(->DataTable) getPages()
(->LogicalTable[]) getUnderlyingTables()
(->DataTable) getUnderlyingTableData()
(->DataTableReader) getUnderlyingTableDataReader()
(->DataSource[]) getDataSources
--deprecated--
-(->DataTable) getSummaryData()
-(->DataTable) getUnderlyingData()
}

class DashboardObject #orange {
Dashboard dashboard
String name
isFloating
String id
DashboardObjectType type
Point position
Size size
Worksheet? worksheet
}

class Filter #thistle{
String fieldName
String fieldId
String worksheetName
FilterType filterType
(->Field) getField
(->String[]) getAppliedWorksheets()
(->String[]) setAppliedWorksheets(String[])
}

class Parameter #thistle{
String name
String id
DataType datatype
DataValue value
ParameterDomainConstraint allowableValues
(->DataValue) changeValues()
}


note right of MarksCollection
why is this the only aggregator class?
end note

class MarkInfo #thistle{
MarkType markType
--not implemented--
#String color
#number tupleId
}

class ConnectionSummary #cadetblue {
String name
String id
String serverURI
String type
}

class TableSummary {
String name
String id
String connectionId
String customSQL
}


class LogicalTable {
String id
String caption 
}

class Column #cadetblue{
String fieldName
String fieldId
DataType dataType
isReferenced
index
}


class Field #cadetblue{
String id == Column.fieldId
DataSource dataSource
isHidden
String name
String? description,
DataType? dataType,
FieldRoleType role,
isGenerated
FieldAggregationType aggregation,
isCombinedField
isPresentOnPublishedDatasource
--not implemented--
#ColumnType columnType
}


class DataTable #lightgreen{
String name
DataValue[][] data
MarkInfo[] marksInfo
Column[] columns
totalRowCount
isTotalRowCountLimited
isSummaryData
}

class DataTableReader {
totalRowCount
pageCount
(->DataTable) getPage(pageNumber)
(->DataTable) getAllPages()
release()
}

class Annotation #thistle{
String annotationText
number annotationId
number tupleId
AnnotationType annotationType
}
@enduml
